// Illustrates n-nearest-neighbors method of KDTree class.  Creates a KDTree
// of M keys, and finds N neighbors of D-dimensional point in center of space
// (all coords = 0.5), with N, D, M specified on command line.

import edu.wlu.cs.levy.CG.KDTree;

import java.util.Arrays;
import java.util.List;
import java.util.Iterator;

class kdnbrs {

    public static void main(String [] args) {
        double [][] keys = {{-0.05643213912844658,0.08125609159469604,-0.00922046136111021,0.06817714124917984,-0.041399139910936356,-0.0754554495215416},
                            {0.020817937911488116,-0.015279000159353018,0.0015632719732820988,-2.198200672864914E-5,-0.013664431869983673,0.03593816515058279},
                {0.0775044858455658,-0.033941250294446945,0.004024764057248831,-0.06582432985305786,7.685621385462582E-4,0.01590070128440857},
                {0.018176039680838585,0.029094159603118896,-0.011020809412002563,-0.02036399580538273,0.014065016992390156,-0.08164876699447632},
                {-0.01690528728067875,-0.05916190147399902,-0.0755416750907898,-0.058038193732500076,-0.063241146504879,0.01081809401512146},
                {0.08274566382169724,0.03239407017827034,0.04617655277252197,0.07465970516204834,-0.056185800582170486,-0.020070483908057213},
                {0.01025890582241118,0.036395100690424446,-0.005092094093561173,0.008213279023766519,0.04475587364286185,0.026760920300148427},
                {-0.0438227653503418,0.03942413255572319,-0.0440952368080616,-0.05259615182876587,-0.0443563349545002,-0.06357285380363464},
                {0.0026273373514413834,0.054388782009482384,-0.00101448007626459,-0.046784818172454834,0.014650063589215279,0.002809180412441492},
                {0.07000192254781723,0.04066307470202446,0.07988601922988892,-0.02833053469657898,0.00481867790222168,-0.016856422647833824},
                {0.03482719464227557,0.05207725241780281,0.031539549585431814,0.025567029137164354,-0.02843201911309734,-0.042061420157551765},
                {0.06061778590083122,0.0617530532181263,-0.0829024612903595,-0.02610226534307003,0.07497284561395645,0.06031270697712898},
                {0.019795546308159828,0.00309414672665298,0.041426610201597214,0.032416682690382004,0.025524497032165527,-0.031189193949103355},
                {-0.06337026506662369,0.04923255369067192,-0.051877666264772415,0.05799412727355957,0.05184448882937431,-0.034890491515398026},
                {-0.05478404834866524,0.017887284979224205,-0.07156611233949661,0.054943036288022995,0.061988044530153275,-0.055442024022340775},
                {0.040346551686525345,0.012658665888011456,-0.0826839804649353,-0.03676636889576912,-0.0627598986029625,0.022912323474884033}};
        String[] vlaue={".2668360882827329","0","0000016886492862910884",".284210975170835",".1723444963887678",
        ".9179762548964311","000001459152333627145", ".8478801664391321", "%u674E%u7167%u7426",".19512200946170855"
        ,"000001627585822672195",".32746478834420595",".47704423833797815",".2554990075789061",".44466384871154513",
        ".511765260630003"};
        int d=6;
        double [] targ = new double [d];
        for (int k=0; k<d; ++k) {
            targ[k] = 0.5;
        }
        System.out.println(Arrays.toString(targ));
        // make a D-dimensional KD-tree
        KDTree<String> kd = new KDTree<String>(d);

        try {

            // add M randomly keyed nodes

            for (int i=0; i<keys.length; ++i) {
                kd.insert(keys[i], vlaue[i]);
            }

            // get N nearest neighbors and show their keys

            long start = time();
            int n=2;
            List<String> nbrs = kd.nearest(targ, n);
            System.out.println(nbrs);
            System.err.println((time() - start) + " msec");

            //System.exit(0);


        }
        catch (Exception e) {
            System.err.println(e);
        }
    }

    private static long time() {
        java.util.GregorianCalendar cal = new java.util.GregorianCalendar();
        return cal.getTimeInMillis();
    }



}
